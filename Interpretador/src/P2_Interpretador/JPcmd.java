/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package P2_Interpretador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Santiago Quintero Hincapié
 */
public class JPcmd extends javax.swing.JPanel {

    public File disk = new File("");
    public boolean stop = false;
    public boolean error = false;
    public String stopMsg = "";

    /**
     * Creates new form JPcmd
     */
    public JPcmd() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        comandosLidos = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        comandos = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        SystemRes = new javax.swing.JTextArea();
        executar = new javax.swing.JButton();

        comandosLidos.setEditable(false);
        comandosLidos.setColumns(20);
        comandosLidos.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        comandosLidos.setRows(5);
        jScrollPane1.setViewportView(comandosLidos);

        comandos.setColumns(20);
        comandos.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        comandos.setRows(5);
        comandos.setText("$JOB\n$DISK P\n$INFILE EM.txt\n$CREATE SM.txt\n$OUTFILE SM.txt\n$RUN EM.txt\n$LIST SM.txt\n$ENDJOB");
        jScrollPane3.setViewportView(comandos);

        SystemRes.setEditable(false);
        SystemRes.setColumns(20);
        SystemRes.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        SystemRes.setLineWrap(true);
        SystemRes.setRows(5);
        jScrollPane4.setViewportView(SystemRes);

        executar.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        executar.setText("EXECUTAR");
        executar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(executar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(executar)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void executarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executarActionPerformed
        executar();
    }//GEN-LAST:event_executarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea SystemRes;
    private javax.swing.JTextArea comandos;
    private javax.swing.JTextArea comandosLidos;
    private javax.swing.JButton executar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables

    private void executar() {
        String[] linhas = this.comandos.getText().split("\n");
        for (int i = 0; i < linhas.length; i++) {
            if (!"".equals(linhas[i])) {
                String[] palavras = linhas[i].split(" ");
                if (palavras[0].charAt(0) == '$') {
                    switch (palavras[0]) {
                        case "$JOB":
                            job();
                            break;
                        case "$DISK":
                            disk(linhas[i]);
                            break;
                        case "$DIRECTORY":
                            directory(linhas[i]);
                            break;
                        case "$CREATE":
                            create(linhas[i]);
                            break;
                        case "$DELETE":
                            delete(linhas[i]);
                            break;
                        case "$LIST":
                            list(linhas[i]);
                            break;
                        case "$INFILE":
                            infile(linhas[i]);
                            break;
                        case "$OUTFILE":
                            outfile(linhas[i]);
                            break;
                        case "$DISKFILE":
                            diskfile(linhas[i]);
                            break;
                        case "$RUN":
                            run(linhas[i]);
                            break;
                        case "$ENDJOB":
                            endjob(linhas[i]);
                            break;
                        default:
                            stopMsg = "Erro de sintaxe: o comando '" + palavras[0] + "' não pode ser interpretado";
                            error = true;
                    }
                    if (error) {
                        this.SystemRes.setText(stopMsg + "\n" + this.SystemRes.getText());
                        this.SystemRes.setCaretPosition(0);
                        stopMsg = "";
                        error = false;
                        break;
                    } else if (stop) {
                        this.SystemRes.setText(stopMsg + "\n" + this.SystemRes.getText());
                        this.SystemRes.setCaretPosition(0);
                        stopMsg = "";
                        stop = false;
                        this.comandosLidos.setText(this.comandosLidos.getText() + linhas[i] + "\n");
                        linhas[i] = "";
                    }
                } else {
                    this.SystemRes.setText("Erro de sintaxe: falta $ em '" + palavras[0] + "'" + "\n" + this.SystemRes.getText());
                    this.SystemRes.setCaretPosition(0);
                    break;
                }
            }
        }
        this.comandos.setText("");
        for (String linha : linhas) {
            if (!"".equals(linha)) {
                this.comandos.setText(this.comandos.getText() + linha + "\n");
            }
        }
    }

    private void job() {
        disk = new File("");
        stop = true;
        comandos.setText("");
        stopMsg = "novo job, sistema reiniciado";
    }

    private void disk(String linha) {
        String[] palavras = linha.split(" ");
        if (palavras.length == 1) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": falta o nome da pasta";
        } else {
            disk = new File("disk" + File.separator + palavras[1]);
            disk.mkdir();
            stop = true;
            stopMsg = "Agora o disco do sistema é: " + "'" + palavras[1] + "'";
        }
    }

    private void directory(String linha) {
        String[] palavras = linha.split(" ");
        String[] file_names = disk.list();
        if (file_names == null) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": você ainda não tem criado o disco";
        } else {
            stop = true;
            for (String file_name : file_names) {
                stopMsg = stopMsg + "\t" + file_name + "\n";
            }
            stopMsg = "Conteudo do disco:\n" + stopMsg;
        }
    }

    private void create(String linha) {
        String[] palavras = linha.split(" ");
        String[] file_names = disk.list();
        if (file_names == null) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": você ainda não tem criado o disco";
        } else {
            if (palavras.length == 1) {
                error = true;
                stopMsg = "Erro em " + palavras[0] + ": falta o nome do arquivo";
            } else {
                File f = new File(disk.getAbsolutePath() + File.separator + palavras[1]);
                if (f.exists()) {
                    error = true;
                    stopMsg = "Erro em " + palavras[0] + ": o arquivo '" + palavras[1] + "' já existe";
                } else {
                    try {
                        f.createNewFile();
                    } catch (IOException ex) {
                        Logger.getLogger(JPcmd.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    stop = true;
                    stopMsg = "Arquivo '" + palavras[1] + "' criado";
                }
            }
        }
    }

    private void delete(String linha) {
        String[] palavras = linha.split(" ");
        String[] file_names = disk.list();
        if (file_names == null) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": você ainda não tem criado o disco";
        } else {
            if (palavras.length == 1) {
                error = true;
                stopMsg = "Erro em " + palavras[0] + ": falta o nome do arquivo";
            } else {
                File f = new File(disk.getAbsolutePath() + File.separator + palavras[1]);
                if (!f.exists()) {
                    error = true;
                    stopMsg = "Erro em " + palavras[0] + ": o arquivo '" + palavras[1] + "' não existe";
                } else {
                    f.delete();
                    stop = true;
                    stopMsg = "Arquivo '" + palavras[1] + "' removido";
                }
            }
        }
    }

    private void list(String linha) {
        String[] palavras = linha.split(" ");
        String[] file_names = disk.list();
        if (file_names == null) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": você ainda não tem criado o disco";
        } else {
            if (palavras.length == 1) {
                error = true;
                stopMsg = "Erro em " + palavras[0] + ": falta o nome do arquivo";
            } else {
                File f = new File(disk.getAbsolutePath() + File.separator + palavras[1]);
                if (!f.exists()) {
                    error = true;
                    stopMsg = "Erro em " + palavras[0] + ": o arquivo '" + palavras[1] + "' não existe";
                } else {
                    try (FileReader fr = new FileReader(disk.getAbsoluteFile() + File.separator + palavras[1])) {
                        BufferedReader br = new BufferedReader(fr);
                        String cadena = "";
                        String aux;
                        while ((aux = br.readLine()) != null) {
                            cadena = (cadena + aux + "\n");
                        }
                        stop = true;
                        stopMsg = "Conteúdo do arquivo '" + palavras[1] + "':\n" + cadena;
                    } catch (IOException ex) {
                        Logger.getLogger(JPcmd.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void infile(String linha) {
        String[] palavras = linha.split(" ");
        String[] file_names = disk.list();
        if (file_names == null) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": você ainda não tem criado o disco";
        } else {
            if (palavras.length == 1) {
                error = true;
                stopMsg = "Erro em " + palavras[0] + ": falta o nome do arquivo";
            } else {
                File f = new File(disk.getAbsolutePath() + File.separator + palavras[1]);
                if (!f.exists()) {
                    error = true;
                    stopMsg = "Erro em " + palavras[0] + ": o arquivo '" + palavras[1] + "' não existe";
                } else {
                    try (FileReader fr = new FileReader(disk.getAbsoluteFile() + File.separator + palavras[1])) {
                        BufferedReader br = new BufferedReader(fr);
                        String cadena = "";
                        String aux;
                        while ((aux = br.readLine()) != null) {
                            cadena = (cadena + aux + "\n");
                        }
                        stop = true;
                        stopMsg = "Conteúdo do arquivo '" + palavras[1] + "' foi copiado no interpretador de linguagem de alto nível, para ser trabalhado";
                        JPlan.lan.setText(cadena);
                    } catch (IOException ex) {
                        Logger.getLogger(JPcmd.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void outfile(String linha) {
        String[] palavras = linha.split(" ");
        String[] file_names = disk.list();
        if (file_names == null) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": você ainda não tem criado o disco";
        } else {
            JPlan.outFile = new File(disk.getAbsolutePath() + File.separator + palavras[1]);
            JPlan.outFile.mkdir();
            stop = true;
            stopMsg = "Saída do interpretador da linguagem de alto nível será salvo no arquivo '" + palavras[1] + "'";
        }
    }

    private void diskfile(String linha) {
        String[] palavras = linha.split(" ");
        String[] file_names = disk.list();
        if (file_names == null) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": você ainda não tem criado o disco";
        } else {
            if (palavras.length == 1) {
                error = true;
                stopMsg = "Erro em " + palavras[0] + ": falta o nome do arquivo";
            } else {
                File f = new File(disk.getAbsolutePath() + File.separator + palavras[1]);
                if (!f.exists()) {
                    error = true;
                    stopMsg = "Erro em " + palavras[0] + ": o arquivo '" + palavras[1] + "' não existe";
                } else {
                    try (FileReader fr = new FileReader(disk.getAbsoluteFile() + File.separator + palavras[1])) {
                        BufferedReader br = new BufferedReader(fr);
                        String cadena = "";
                        String aux;
                        while ((aux = br.readLine()) != null) {
                            cadena = (cadena + aux + "\n");
                        }
                        stop = true;
                        stopMsg = "Conteúdo do arquivo '" + palavras[1] + "' foi copiado na memoria da MVN, para ser trabalhado";
                        JPmvn.memory.setText(cadena);
                        JPmvn.memory.setCaretPosition(0);
                        JPmvn.step.setEnabled(true);
                        JPmvn.run.setEnabled(true);
                    } catch (IOException ex) {
                        Logger.getLogger(JPcmd.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void run(String linha) {
        String[] palavras = linha.split(" ");
        String[] file_names = disk.list();
        if (file_names == null) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": você ainda não tem criado o disco";
        } else {

            if (palavras.length == 1) {
                error = true;
                stopMsg = "Erro em " + palavras[0] + ": falta o nome do arquivo";
            } else {
                File f = new File(disk.getAbsolutePath() + File.separator + palavras[1]);
                if (!f.exists()) {
                    error = true;
                    stopMsg = "Erro em " + palavras[0] + ": o arquivo '" + palavras[1] + "' não existe";
                } else {
                    try (FileReader fr = new FileReader(disk.getAbsoluteFile() + File.separator + palavras[1])) {
                        BufferedReader br = new BufferedReader(fr);
                        String cadena = "";
                        String aux;
                        while ((aux = br.readLine()) != null) {
                            cadena = (cadena + aux + "\n");
                        }
                        JPlan.lan.setText(cadena);
                        JPlan.executar();
                        stop = true;
                        stopMsg = "O interpretador da linguagem de alto nível executó o arquivo '" + palavras[1] + "'";
                    } catch (IOException ex) {
                        Logger.getLogger(JPcmd.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void endjob(String linha) {
        String[] palavras = linha.split(" ");
        String[] file_names = disk.list();
        if (file_names == null) {
            error = true;
            stopMsg = "Erro em " + palavras[0] + ": você ainda não tem criado o disco";
        } else {
            disk = new File("");
            stop = true;
            comandos.setText("");
            stopMsg = "Sistema reiniciado";
        }
    }
}
