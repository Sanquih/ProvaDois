/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package P2_Interpretador;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author sanqu
 */
public class JPlan extends javax.swing.JPanel {

    private static String stopMsg = "";
    private static boolean error = false;
    private static boolean stop = false;
    private static int i = 0;
    private static ArrayList<String> variaveis = new ArrayList();
    private static ArrayList<Integer> dados = new ArrayList();
    private static ArrayList<String> rotulosName = new ArrayList();
    private static ArrayList<Integer> rotulosEndereco = new ArrayList();
    private static int size = 0;
    public static File outFile;

    /**
     * Creates new form LPlan
     */
    public JPlan() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lan = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        saida = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        entrada = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        lan.setColumns(20);
        lan.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        lan.setRows(5);
        jScrollPane1.setViewportView(lan);

        saida.setEditable(false);
        saida.setColumns(20);
        saida.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        saida.setLineWrap(true);
        saida.setRows(5);
        jScrollPane2.setViewportView(saida);

        jButton2.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jButton2.setText("EXECUTAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jButton3.setText("CLEAN ALL");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jLabel1.setText("ENTRADA:");

        entrada.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N

        jButton4.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        jButton4.setText("CLEAN CODIGO");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(entrada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(entrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton4))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        executar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        stopMsg = "";
        error = false;
        stop = false;
        i = 0;
        variaveis = new ArrayList();
        dados = new ArrayList();
        rotulosName = new ArrayList();
        rotulosEndereco = new ArrayList();
        size = 0;
        lan.setText("");
        saida.setText("");
        entrada.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        stopMsg = "";
        error = false;
        stop = false;
        i = 0;
        variaveis = new ArrayList();
        dados = new ArrayList();
        size = 0;
        lan.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField entrada;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextArea lan;
    public static javax.swing.JTextArea saida;
    // End of variables declaration//GEN-END:variables

    public static void executar() {
        String[] linhas = JPlan.lan.getText().split("\n");
        size = linhas.length;
        boolean entradaIsEmpty = false;
        rotulo(linhas);
        while (i < size) {
            if (!"".equals(linhas[i])) {
                String[] palavras = linhas[i].split(" ");
                int j = 0;
                if (palavras[0].charAt(palavras[0].length() - 1) == ':') {
                    j++;
                }
                if (!error) {
                    switch (palavras[j]) {
                        case "LET":
                            let(linhas[i], j);
                            break;
                        case "GOTO":
                            gotoo(linhas[i], j);
                            break;
                        case "READ":
                            if ("".equals(entrada.getText())) {
                                entradaIsEmpty = true;
                                stopMsg = "Esperando dado na entrada";
                                error = true;
                            } else {
                                read(linhas[i], j);
                            }
                            break;
                        case "WRITE":
                            write(linhas[i], j);
                            break;
                        default:
                            stopMsg = "Erro de sintaxe: o comando '" + palavras[j] + "' nÃ£o pode ser interpretado";
                            error = true;
                    }
                }
                if (error) {
                    JPlan.saida.setText(stopMsg + "\n" + JPlan.saida.getText());
                    JPlan.saida.setCaretPosition(0);
                    stopMsg = "";
                    error = false;
                    break;
                } else if (stop) {
                    JPlan.saida.setText(stopMsg + "\n" + JPlan.saida.getText());
                    JPlan.saida.setCaretPosition(0);
                    stopMsg = "";
                    stop = false;
                }
            }
            i++;
        }
        JPlan.lan.setText("");
        for (String linha : linhas) {
            if (!"".equals(linha)) {
                JPlan.lan.setText(JPlan.lan.getText() + linha + "\n");
            }
        }
        if (!entradaIsEmpty) {
            i = 0;
            JPlan.saida.setText("-----------------------------------------------\n" + "CÃ³digo compilado correctamente" + "\n" + JPlan.saida.getText());
            JPlan.saida.setCaretPosition(0);
            File f = new File(outFile.getAbsolutePath());
            if (f.exists()) {
                try (FileWriter fw = new FileWriter(f)) {
                    fw.append(JPlan.saida.getText());
                } catch (IOException ex) {
                    Logger.getLogger(JPcmd.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private static void let(String linha, int j) {
        String[] palavras = linha.split(" ");
        if (palavras.length == j + 1) {
            error = true;
            stopMsg = "Erro em " + palavras[j] + ": dados estÃ£o faltando";
        } else {
            if (!linha.contains("=")) {
                error = true;
                stopMsg = "Erro em " + palavras[j] + ": falta =";
            } else {
                String exp = linha.substring(linha.indexOf("=") + 1);
                if ("".equals(exp)) {
                    error = true;
                    stopMsg = "Erro em " + palavras[j] + ": falta expressÃ£o";
                } else {
                    palavras[j + 1] = palavras[j + 1].substring(0, palavras[j + 1].indexOf("="));
                    palavras[j + 1] = palavras[j + 1].replace(" ", "");
                    if (variaveis.contains(palavras[j + 1])) {
                        int aux = expressao(exp);
                        dados.set(variaveis.indexOf(palavras[j + 1]), aux);
                        stop = true;
                        stopMsg = "VariÃ¡vel " + palavras[j + 1] + "=" + aux + " atualizada";
                    } else {
                        int aux = expressao(exp);
                        variaveis.add(palavras[j + 1]);
                        dados.add(aux);
                        stop = true;
                        stopMsg = "VariÃ¡vel " + palavras[j + 1] + "=" + aux + " salvada";
                    }
                }
            }
        }
    }

    private static void gotoo(String linha, int j) {
        String[] palavras = linha.split(" ");
        if (palavras.length == j + 1) {
            error = true;
            stopMsg = "Erro em " + palavras[j] + ": dados estÃ£o faltando";
        } else {
            if (linha.contains("IF")) {
                if (!"IF".equals(palavras[j + 2])) {
                    error = true;
                    stopMsg = "Erro em " + palavras[j] + ": IF no lugar errado";
                } else {
                    String op = "";
                    if (linha.contains("=")) {
                        op = "=";
                    } else if (linha.contains("<")) {
                        op = "<";
                    } else if (linha.contains(">")) {
                        op = ">";
                    }
                    String exp1 = linha.substring(linha.indexOf(palavras[j + 2]) + palavras[j + 2].length() + 1, linha.indexOf(op));
                    String exp2 = linha.substring(linha.indexOf(op) + 1, linha.length());
                    int aux1 = expressao(exp1);
                    int aux2 = expressao(exp2);
                    if (!JPlan.isNumeric(palavras[j + 1])) {
                        if (!rotulosName.contains(palavras[j + 1])) {
                            error = true;
                            stopMsg = "Erro em " + palavras[j] + ": endereÃ§o errado";
                        } else {
                            if (("=".equals(op) & aux1 == aux2) | ("<".equals(op) & aux1 < aux2) | (">".equals(op) & aux1 > aux2)) {
                                stopMsg = "Desvio desde " + (i + 1);
                                i = rotulosEndereco.get(rotulosName.indexOf(palavras[j + 1])) - 1;
                                stop = true;
                                stopMsg = stopMsg + " a " + (i + 1) + " feito";
                            }
                        }
                    } else {
                        if (Integer.parseInt(palavras[j + 1]) > size) {
                            error = true;
                            stopMsg = "Erro em " + palavras[j] + ": endereÃ§o maior do que o tamanho do cÃ³digo";
                        } else {
                            if (("=".equals(op) & aux1 == aux2) | ("<".equals(op) & aux1 < aux2) | (">".equals(op) & aux1 > aux2)) {
                                stopMsg = "Desvio desde " + (i + 1);
                                i = Integer.parseInt(palavras[j + 1]) - 2;
                            }
                            stop = true;
                            stopMsg = stopMsg + " a " + (i + 2) + " feito";
                        }
                    }
                }
            } else {
                if (!JPlan.isNumeric(palavras[j + 1])) {
                    if (!rotulosName.contains(palavras[j + 1])) {
                        error = true;
                        stopMsg = "Erro em " + palavras[j] + ": endereÃ§o errado";
                    } else {
                        stopMsg = "Desvio desde " + (i + 1);
                        i = rotulosEndereco.get(rotulosName.indexOf(palavras[j + 1])) - 2;
                        stop = true;
                        stopMsg = stopMsg + " a " + (i + 2) + " feito";
                    }
                } else {
                    if (Integer.parseInt(palavras[j + 1]) > size) {
                        error = true;
                        stopMsg = "Erro em " + palavras[j] + ": endereÃ§o maior do que o tamanho do cÃ³digo";
                    } else {
                        stopMsg = "Desvio desde " + (i + 1);
                        i = Integer.parseInt(palavras[j + 1]) - 2;
                        stop = true;
                        stopMsg = stopMsg + " a " + (i + 2) + " feito";
                    }
                }
            }
        }
    }

    private static boolean isNumeric(String cadena) {
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    private static void read(String linha, int j) {
        String[] palavras = linha.split(" ");
        if (palavras.length == j + 1) {
            error = true;
            stopMsg = "Erro em " + palavras[j] + ": dados estÃ£o faltando";
        } else {
            if ("".equals(entrada.getText())) {
                error = true;
                stopMsg = "Erro em " + palavras[j] + ": a entrada estÃ¡ vazia";
            } else {
                if (variaveis.contains(palavras[j + 1])) {
                    if (!JPlan.isNumeric(entrada.getText())) {
                        if (!variaveis.contains(entrada.getText())) {
                            error = true;
                            stopMsg = "Erro em " + palavras[j] + ": entrada errada";
                        } else {
                            dados.set(variaveis.indexOf(palavras[j + 1]), dados.get(variaveis.indexOf(entrada.getText())));
                            stopMsg = "VariÃ¡vel " + palavras[j + 1] + "=" + dados.get(variaveis.indexOf(entrada.getText())) + " atualizada";
                            entrada.setText("");
                            stop = true;
                        }
                    } else {
                        dados.set(variaveis.indexOf(palavras[j + 1]), Integer.parseInt(entrada.getText()));
                        stopMsg = "VariÃ¡vel " + palavras[j + 1] + "=" + Integer.parseInt(entrada.getText()) + " atualizada";
                        entrada.setText("");
                        stop = true;
                    }
                } else {
                    if (!JPlan.isNumeric(entrada.getText())) {
                        if (!variaveis.contains(entrada.getText())) {
                            error = true;
                            stopMsg = "Erro em " + palavras[j] + ": entrada errada";
                        } else {
                            variaveis.add(palavras[j + 1]);
                            dados.add(dados.get(variaveis.indexOf(entrada.getText())));
                            stopMsg = "VariÃ¡vel " + palavras[j + 1] + "=" + dados.get(variaveis.indexOf(entrada.getText())) + " salvada";
                            entrada.setText("");
                            stop = true;
                        }
                    } else {
                        variaveis.add(palavras[j + 1]);
                        dados.add(Integer.parseInt(entrada.getText()));
                        stopMsg = "VariÃ¡vel " + palavras[j + 1] + "=" + Integer.parseInt(entrada.getText()) + " salvada";
                        entrada.setText("");
                        stop = true;
                    }
                }
            }
        }
    }

    private static void write(String linha, int j) {
        String[] palavras = linha.split(" ");
        if (palavras.length == j + 1) {
            error = true;
            stopMsg = "Erro em " + palavras[j] + ": dados estÃ£o faltando";
        } else {
            palavras[j + 1] = palavras[j + 1].replace(" ", "");
            int aux = expressao(palavras[j + 1]);
            stop = true;
            stopMsg = palavras[j + 1] + " Ã© " + aux;
        }
    }

    private static void rotulo(String[] linha) {
        for (int x = 0; x < linha.length; x++) {
            String[] palavras = linha[x].split(" ");
            if (palavras[0].charAt(palavras[0].length() - 1) == ':') {
                if (palavras.length == 1) {
                    error = true;
                    stopMsg = "Erro em " + palavras[0] + " dados estÃ£o faltando";
                } else {
                    palavras[0] = palavras[0].replace(":", "");
                    if (rotulosName.contains(palavras[0])) {
                        rotulosEndereco.set(rotulosName.indexOf(palavras[0]), x);
                    } else {
                        rotulosName.add(palavras[0]);
                        rotulosEndereco.add(x);
                        stop = true;
                        stopMsg = "";
                    }
                }
            }
        }
    }

    private static int expressao(String exp) {
        String num = exp.replace("+", " ");
        num = num.replace("-", " ");
        num = num.replace("*", " ");
        num = num.replace("/", " ");
        String[] nums = num.split(" ");
        String op = "";
        for (int p = 0; p < exp.length(); p++) {
            switch (exp.charAt(p)) {
                case '+':
                case '-':
                case '*':
                case '/':
                    op = op + exp.charAt(p) + " ";
                    break;
            }
        }
        int acomulado;
        if (variaveis.contains(nums[0])) {
            acomulado = dados.get(variaveis.indexOf(nums[0]));
        } else {
            acomulado = Integer.parseInt(nums[0]);
        }
        if (!"".equals(op)) {
            String[] ops = op.split(" ");
            for (int p = 1; p < nums.length; p++) {
                if (variaveis.contains(nums[p])) {
                    nums[p] = Integer.toHexString(dados.get(variaveis.indexOf(nums[p])));
                }
                switch (ops[p - 1]) {
                    case "+":
                        acomulado = acomulado + Integer.parseInt(nums[p]);
                        break;
                    case "-":
                        acomulado = acomulado - Integer.parseInt(nums[p]);
                        break;
                    case "*":
                        acomulado = acomulado * Integer.parseInt(nums[p]);
                        break;
                    case "/":
                        acomulado = acomulado / Integer.parseInt(nums[p]);
                        break;
                }
            }
        }
        return acomulado;
    }

}
